
running 1 test
test scope_tree::parser::test::fn_if ... FAILED

failures:

---- scope_tree::parser::test::fn_if stdout ----
parse_scope_contents start
DEBUG - lexer peek, first token: Token { kind: Fn, span: Span { start: 0, len: 2 } }
DEBUG - lexer peek, first token: Token { kind: Fn, span: Span { start: 0, len: 2 } }
parse_fn_for_op start
    DEBUG - lexer next, first token: Token { kind: Fn, span: Span { start: 0, len: 2 } }
    parse_token Identifier start
        DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 3, len: 12 } }
        DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 3, len: 12 } }
    parse_token Identifier end
    parse_token OpenParen start
        DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 16, len: 1 } }
        DEBUG - lexer next, first token: Token { kind: OpenParen, span: Span { start: 16, len: 1 } }
    parse_token OpenParen end
    DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 17, len: 1 } }
    DEBUG - lexer next, first token: Token { kind: NewLine, span: Span { start: 17, len: 1 } }
    DEBUG - lexer peek, first token: Token { kind: Op, span: Span { start: 22, len: 2 } }
    DEBUG - lexer peek, first token: Token { kind: Op, span: Span { start: 22, len: 2 } }
    DEBUG - lexer next, first token: Token { kind: Op, span: Span { start: 22, len: 2 } }
    parse_op_parts start
        DEBUG - lexer peek, first token: Token { kind: NamePart, span: Span { start: 25, len: 4 } }
        DEBUG - lexer peek, first token: Token { kind: NamePart, span: Span { start: 25, len: 4 } }
        parse_op_name_part start
            DEBUG - lexer next, first token: Token { kind: NamePart, span: Span { start: 25, len: 4 } }
        parse_op_name_part end
        DEBUG - lexer peek, first token: Token { kind: Underscore, span: Span { start: 30, len: 1 } }
        parse_op_argument start
            DEBUG - lexer next, first token: Token { kind: Underscore, span: Span { start: 30, len: 1 } }
        parse_op_argument end
        DEBUG - lexer peek, first token: Token { kind: NamePart, span: Span { start: 32, len: 6 } }
        parse_op_name_part start
            DEBUG - lexer next, first token: Token { kind: NamePart, span: Span { start: 32, len: 6 } }
        parse_op_name_part end
        DEBUG - lexer peek, first token: Token { kind: Backslash, span: Span { start: 39, len: 1 } }
        parse_op_lazy_argument start
            DEBUG - lexer next, first token: Token { kind: Backslash, span: Span { start: 39, len: 1 } }
            DEBUG - lexer peek, first token: Token { kind: Underscore, span: Span { start: 40, len: 1 } }
            DEBUG - lexer next, first token: Token { kind: Underscore, span: Span { start: 40, len: 1 } }
        parse_op_lazy_argument end
        DEBUG - lexer peek, first token: Token { kind: NamePart, span: Span { start: 42, len: 6 } }
        parse_op_name_part start
            DEBUG - lexer next, first token: Token { kind: NamePart, span: Span { start: 42, len: 6 } }
        parse_op_name_part end
        DEBUG - lexer peek, first token: Token { kind: Backslash, span: Span { start: 49, len: 1 } }
        parse_op_lazy_argument start
            DEBUG - lexer next, first token: Token { kind: Backslash, span: Span { start: 49, len: 1 } }
            DEBUG - lexer peek, first token: Token { kind: Underscore, span: Span { start: 50, len: 1 } }
            DEBUG - lexer next, first token: Token { kind: Underscore, span: Span { start: 50, len: 1 } }
        parse_op_lazy_argument end
        DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 51, len: 1 } }
    parse_op_parts end
    parse_op_bindings start
        DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 51, len: 1 } }
        DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 51, len: 1 } }
        DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 51, len: 1 } }
    parse_op_bindings end
parse_fn_for_op end
DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 51, len: 1 } }
DEBUG - lexer next, first token: Token { kind: NewLine, span: Span { start: 51, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Colon, span: Span { start: 56, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Colon, span: Span { start: 56, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 58, len: 4 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 58, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 63, len: 1 } }
parse_scope start
DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 63, len: 1 } }
DEBUG - lexer next, first token: Token { kind: OpenParen, span: Span { start: 63, len: 1 } }
parse_scope_contents start
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 64, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 64, len: 4 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 64, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 69, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 69, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 70, len: 1 } }
parse_scope_contents end
parse_token CloseParen start
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 70, len: 1 } }
DEBUG - lexer next, first token: Token { kind: CloseParen, span: Span { start: 70, len: 1 } }
parse_token CloseParen end
parse_scope end
DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 72, len: 1 } }
parse_scope start
DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 72, len: 1 } }
DEBUG - lexer next, first token: Token { kind: OpenParen, span: Span { start: 72, len: 1 } }
parse_scope_contents start
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 73, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 73, len: 4 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 73, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 78, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 78, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 79, len: 1 } }
parse_scope_contents end
parse_token CloseParen start
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 79, len: 1 } }
DEBUG - lexer next, first token: Token { kind: CloseParen, span: Span { start: 79, len: 1 } }
parse_token CloseParen end
parse_scope end
DEBUG - lexer peek, first token: Token { kind: RightArrow, span: Span { start: 81, len: 2 } }
DEBUG - lexer next, first token: Token { kind: RightArrow, span: Span { start: 81, len: 2 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 84, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 84, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 85, len: 1 } }
DEBUG - lexer next, first token: Token { kind: NewLine, span: Span { start: 85, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Equals, span: Span { start: 90, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Equals, span: Span { start: 90, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 92, len: 4 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 92, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 97, len: 4 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 97, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: Underscore, span: Span { start: 102, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Underscore, span: Span { start: 102, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Equals, span: Span { start: 104, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Equals, span: Span { start: 104, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Error, span: Span { start: 105, len: 1 } }
DEBUG - lexer peek loop, token: Token { kind: Identifier, span: Span { start: 107, len: 4 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 107, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 112, len: 1 } }
parse_scope start
DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 112, len: 1 } }
DEBUG - lexer next, first token: Token { kind: OpenParen, span: Span { start: 112, len: 1 } }
parse_scope_contents start
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 113, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 113, len: 1 } }
parse_scope_contents end
parse_token CloseParen start
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 113, len: 1 } }
DEBUG - lexer next, first token: Token { kind: CloseParen, span: Span { start: 113, len: 1 } }
parse_token CloseParen end
parse_scope end
DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 114, len: 1 } }
DEBUG - lexer next, first token: Token { kind: NewLine, span: Span { start: 114, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Equals, span: Span { start: 119, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Equals, span: Span { start: 119, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 121, len: 5 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 121, len: 5 } }
DEBUG - lexer peek, first token: Token { kind: Underscore, span: Span { start: 128, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Underscore, span: Span { start: 128, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Identifier, span: Span { start: 130, len: 4 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 130, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: Equals, span: Span { start: 135, len: 1 } }
DEBUG - lexer next, first token: Token { kind: Equals, span: Span { start: 135, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: Error, span: Span { start: 136, len: 1 } }
DEBUG - lexer peek loop, token: Token { kind: Identifier, span: Span { start: 138, len: 4 } }
DEBUG - lexer next, first token: Token { kind: Identifier, span: Span { start: 138, len: 4 } }
DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 143, len: 1 } }
parse_scope start
DEBUG - lexer peek, first token: Token { kind: OpenParen, span: Span { start: 143, len: 1 } }
DEBUG - lexer next, first token: Token { kind: OpenParen, span: Span { start: 143, len: 1 } }
parse_scope_contents start
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 144, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 144, len: 1 } }
parse_scope_contents end
parse_token CloseParen start
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 144, len: 1 } }
DEBUG - lexer next, first token: Token { kind: CloseParen, span: Span { start: 144, len: 1 } }
parse_token CloseParen end
parse_scope end
DEBUG - lexer peek, first token: Token { kind: NewLine, span: Span { start: 145, len: 1 } }
DEBUG - lexer next, first token: Token { kind: NewLine, span: Span { start: 145, len: 1 } }
DEBUG - lexer peek, first token: Token { kind: CloseParen, span: Span { start: 146, len: 1 } }
parse_scope_contents end
thread 'scope_tree::parser::test::fn_if' panicked at compiler\src\scope_tree\parser.rs:463:9:
assertion failed: `(left == right)`

[1mDiff[0m [31m< left[0m / [32mright >[0m :
 Parsed {
     span: Span {
         start: 0,
[31m<        len: 14[0m[1;48;5;52;31m7[0m[31m,[0m
[32m>        len: 14[0m[1;48;5;22;32m6[0m[32m,[0m
     },
     outcome: Valid(
         Scope {
             uses: [],
             op_defs: [
                 Parsed {
                     span: Span {
                         start: 22,
                         len: 29,
                     },
                     outcome: Valid(
                         OpDef {
                             parts: Parsed {
                                 span: Span {
                                     start: 25,
                                     len: 26,
                                 },
                                 outcome: Valid(
                                     OpParts(
                                         [
                                             Parsed {
                                                 span: Span {
                                                     start: 25,
                                                     len: 4,
                                                 },
                                                 outcome: Valid(
                                                     Literal,
                                                 ),
                                             },
                                             Parsed {
                                                 span: Span {
                                                     start: 30,
                                                     len: 1,
                                                 },
                                                 outcome: Valid(
                                                     Argument,
                                                 ),
                                             },
                                             Parsed {
                                                 span: Span {
                                                     start: 32,
                                                     len: 6,
                                                 },
                                                 outcome: Valid(
                                                     Literal,
                                                 ),
                                             },
                                             Parsed {
                                                 span: Span {
                                                     start: 39,
                                                     len: 2,
                                                 },
                                                 outcome: Valid(
                                                     LazyArgument,
                                                 ),
                                             },
                                             Parsed {
                                                 span: Span {
                                                     start: 42,
                                                     len: 6,
                                                 },
                                                 outcome: Valid(
                                                     Literal,
                                                 ),
                                             },
                                             Parsed {
                                                 span: Span {
                                                     start: 49,
                                                     len: 2,
                                                 },
                                                 outcome: Valid(
                                                     LazyArgument,
                                                 ),
                                             },
                                         ],
                                     ),
                                 ),
                             },
                             bindings: Parsed {
                                 span: Span {
                                     start: 51,
                                     len: 0,
                                 },
                                 outcome: Valid(
                                     OpBindings(
                                         [],
                                     ),
                                 ),
                             },
                         },
                     ),
                 },
             ],
[31m<            children: [],[0m
[32m>            children: [[0m
[32m>                Parsed {[0m
[32m>                    span: Span {[0m
[32m>                        start: 63,[0m
[32m>                        len: 8,[0m
[32m>                    },[0m
[32m>                    outcome: Valid([0m
[32m>                        Scope {[0m
[32m>                            uses: [],[0m
[32m>                            op_defs: [],[0m
[32m>                            children: [],[0m
[32m>                        },[0m
[32m>                    ),[0m
[32m>                },[0m
[32m>                Parsed {[0m
[32m>                    span: Span {[0m
[32m>                        start: 72,[0m
[32m>                        len: 8,[0m
[32m>                    },[0m
[32m>                    outcome: Valid([0m
[32m>                        Scope {[0m
[32m>                            uses: [],[0m
[32m>                            op_defs: [],[0m
[32m>                            children: [],[0m
[32m>                        },[0m
[32m>                    ),[0m
[32m>                },[0m
[32m>                Parsed {[0m
[32m>                    span: Span {[0m
[32m>                        start: 112,[0m
[32m>                        len: 2,[0m
[32m>                    },[0m
[32m>                    outcome: Valid([0m
[32m>                        Scope {[0m
[32m>                            uses: [],[0m
[32m>                            op_defs: [],[0m
[32m>                            children: [],[0m
[32m>                        },[0m
[32m>                    ),[0m
[32m>                },[0m
[32m>                Parsed {[0m
[32m>                    span: Span {[0m
[32m>                        start: 143,[0m
[32m>                        len: 2,[0m
[32m>                    },[0m
[32m>                    outcome: Valid([0m
[32m>                        Scope {[0m
[32m>                            uses: [],[0m
[32m>                            op_defs: [],[0m
[32m>                            children: [],[0m
[32m>                        },[0m
[32m>                    ),[0m
[32m>                },[0m
[32m>            ],[0m
         },
     ),
 }


note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    scope_tree::parser::test::fn_if

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 4 filtered out; finished in 0.00s

